import React, { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { blogPosts } from "../blog/posts";
import "../styles/BlogPost.css";

// Utility to strip YAML frontmatter from markdown
function stripFrontmatter(md) {
  if (!md) return md;
  // Remove YAML frontmatter between --- ... ---
  return md.replace(/^---[\\s\\S]*?---/, '').trim();
}

const fallbackContent = {
  "build-your-ai-clone": `## Step 1: Define Your Use Case\nDescribe what you want your AI clone to do.\n\n## Step 2: Choose Tools\nPick a no-code or low-code AI platform.\n\n## Step 3: Integrate with APIs\nConnect to OpenAI or similar APIs for intelligence.\n\n## Step 4: Add UI/UX\nDesign a simple, user-friendly interface.\n\n## Step 5: Test & Deploy\nTest thoroughly and deploy your clone.`,
  "trustworthy-ai": `## Our Principles\n- Ethics\n- Transparency\n- Security\n\n## How We Ensure Trust\n- Human-in-the-loop\n- Open data\n- Auditable models`,
  "customer-engagement": `## Why AI for Engagement?\nAI helps automate and personalize customer journeys.\n\n## Use Cases\n- Chatbots\n- Email personalization\n- Automated follow-ups` 
};

export default function BlogPost() {
  const { slug } = useParams();
  const post = blogPosts.find(p => p.slug === slug);
  const [mdContent, setMdContent] = useState(null);

  useEffect(() => {
    let isMounted = true;
    if (post) {
      const mdPath = require(`../blog/${post.date}-${slug}.md`);
      fetch(mdPath)
        .then(res => res.text())
        .then(content => {
          if (isMounted) setMdContent(content);
        })
        .catch(() => setMdContent(null));
    }
    return () => { isMounted = false; };
  }, [post, slug]);

  if (!post) return <div className="blog-post-container">Blog post not found.</div>;
  
  // Function to render markdown content
  const renderContent = (markdownContent) => {
    const blocks = stripFrontmatter(markdownContent).split(/\n{2,}/);
    
    return blocks.map((block, index) => {
      if (/^### /.test(block)) {
        return <h3 key={index}>{block.replace(/^### /, '')}</h3>;
      } else if (/^## /.test(block)) {
        return <h2 key={index}>{block.replace(/^## /, '')}</h2>;
      } else if (/^- /.test(block)) {
        return (
          <ul key={index}>
            {block.split(/\n/).map((li, j) => 
              li.startsWith('- ') ? <li key={j}>{li.replace(/^- /, '')}</li> : null
            )}
          </ul>
        );
      } else if (/^\d+\. /.test(block)) {
        return (
          <ol key={index}>
            {block.split(/\n/).map((li, j) => 
              /^\d+\. /.test(li) ? <li key={j}>{li.replace(/^\d+\. /, '')}</li> : null
            )}
          </ol>
        );
      } else if (/^> /.test(block)) {
        return <blockquote key={index}>{block.replace(/^> /, '')}</blockquote>;
      } else if (/^!\[.*\]\(.*\)/.test(block)) {
        const match = block.match(/^!\[(.*)\]\((.*)\)/);
        return <img key={index} src={match[2]} alt={match[1]} />;
      } else {
        return <p key={index}>{block}</p>;
      }
    });
  };

  return (
    <div className="blog-post-container">
      <article>
        <div className="blog-post-header">
          <Link to="/blog" className="blog-post-back-link">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path fillRule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
            </svg>
            Back to Blog
          </Link>
          
          <div className="blog-post-meta">
            {post.tags && post.tags.map((tag, i) => (
              <span key={i} className="blog-post-category">{tag}</span>
            ))}
            <span className="blog-post-date">{post.date}</span>
          </div>
          
          <h1 className="blog-post-title">{post.title}</h1>
          <p className="blog-post-description">{post.summary}</p>
        </div>
        
        <div className="blog-post-featured-image">
          <img 
            src={post.image || 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&q=80'} 
            alt={post.title}
            onError={e => { e.target.onerror = null; e.target.src = 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&q=80'; }}
          />
        </div>
        
        <div className="blog-post-content">
          {mdContent
            ? renderContent(mdContent)
            : fallbackContent[slug]
              ? renderContent(fallbackContent[slug])
              : <p>Post content coming soon.</p>
          }
        </div>
        
        <div className="blog-post-author">
          <div className="blog-post-author-image">
            <img src="https://i.pravatar.cc/120" alt={post.author || 'Author'} />
          </div>
          <div className="blog-post-author-info">
            <h3>{post.author || 'Growbro Team'}</h3>
            <p>AI Solutions Specialist</p>
          </div>
        </div>
      </article>
    </div>
  );
}
